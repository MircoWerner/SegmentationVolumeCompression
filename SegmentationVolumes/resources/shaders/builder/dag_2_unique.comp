#version 460
#extension GL_GOOGLE_include_directive: enable

#include "dag_common.glsl"

layout (local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;

layout (push_constant, std430) uniform PushConstants {
    uint g_level;// current level
    uint g_level_index;// index of the first node of the current level
    uint g_level_count;// number of nodes in the current level

    uint g_global_offset;
};

layout (std430, set = 0, binding = 0) buffer dag {
    DAGNode g_dag[];
};

layout (std430, set = 0, binding = 1) buffer storage {
    uint g_storage[]; // contains prefix sum
};

void main() {
    uint gID = gl_GlobalInvocationID.x;
    uint lID = gl_LocalInvocationID.x;

    if (gID >= g_level_count) {
        return;
    }

    // compare current node with left neighbor
    uint unique = 1;

    if (gID > 0) {
        uint index = g_level_index + gID;
        uint indexLeft = g_level_index + gID - 1;
        DAGNode node = g_dag[index];
        DAGNode nodeLeft = g_dag[indexLeft];

        unique = dag_common_equals(node, nodeLeft) ? 0 : 1; // 1 if not equal with left neighbor
    }

    // store
    g_storage[gID] = unique;
}

