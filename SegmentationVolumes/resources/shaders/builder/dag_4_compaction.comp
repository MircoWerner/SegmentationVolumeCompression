/*
SINGLE WORK GROUP COMPACTION
-> we have to avoid allocating a dedicated output buffer
-> work in place on the dag buffer
*/

#version 460
#extension GL_GOOGLE_include_directive: enable

#include "dag_common.glsl"

layout (local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;

layout (push_constant, std430) uniform PushConstants {
    uint g_level;// current level
    uint g_level_index;// index of the first node of the current level
    uint g_level_count;// number of nodes in the current level

    uint g_global_offset;
};

layout (std430, set = 0, binding = 0) buffer dag {
    DAGNode g_dag[];
};

layout (std430, set = 0, binding = 1) buffer dag_levels {
    DAGLevel g_dag_levels[];
};

layout (std430, set = 0, binding = 2) buffer storage {
    uint g_storage[]; // contains prefix sum
};

layout (std430, set = 0, binding = 3) buffer indirection {
    uint g_indirection[];
};

layout (std430, set = 0, binding = 4) buffer index {
    uint g_index[];
};

shared uint levelCount;

void main() {
    uint gID = gl_GlobalInvocationID.x; // single work group, hence gID = lID
    uint lID = gl_LocalInvocationID.x;

    if (gID >= g_level_count) {
        return;
    }

    // store dag level info
    if (gID == 0) {
        g_dag_levels[g_level].index = g_global_offset;
        g_dag_levels[g_level].count = g_storage[g_level_count - 1];
    }

    // sync
    barrier();

    for (uint offset = 0; offset < g_level_count; offset += gl_WorkGroupSize.x) {
        uint levelIndex = offset + lID;

        uint destination;
        uint leftDestination = 0xFFFFFFFFu;
        DAGNode node;

        if (levelIndex < g_level_count) {
            uint globalIndex = g_level_index + levelIndex;

            destination = g_global_offset + g_storage[levelIndex] - 1;
            if (levelIndex > 0) {
                leftDestination = g_global_offset + g_storage[levelIndex - 1] - 1;
            }

            // compaction
            node = g_dag[globalIndex];

            // indirection list
            g_indirection[g_index[globalIndex]] = destination;
        }

        barrier();

        if (levelIndex < g_level_count && leftDestination != destination) {
            g_dag[destination] = node;
        }
    }
}

