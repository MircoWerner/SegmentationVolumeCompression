#version 460
#extension GL_GOOGLE_include_directive: enable

#include "dag_common.glsl"

layout (local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;

layout (push_constant, std430) uniform PushConstants {
    uint g_level;// current level
    uint g_level_index;// index of the first node of the current level
    uint g_level_count;// number of nodes in the current level

    uint g_global_offset;
};

layout (std430, set = 0, binding = 0) buffer dag {
    DAGNode g_dag[];
};

layout (std430, set = 0, binding = 1) buffer indirection {
    uint g_indirection[];
};

layout (std430, set = 0, binding = 2) buffer index {
    uint g_index[];
};

void updateChildPointers(inout DAGNode node) {
    node.child0 = g_indirection[node.child0];
    node.child1 = g_indirection[node.child1];
    node.child2 = g_indirection[node.child2];
    node.child3 = g_indirection[node.child3];
    node.child4 = g_indirection[node.child4];
    node.child5 = g_indirection[node.child5];
    node.child6 = g_indirection[node.child6];
    node.child7 = g_indirection[node.child7];
}

void main() {
    uint gID = gl_GlobalInvocationID.x;
    uint lID = gl_LocalInvocationID.x;

    if (gID >= g_level_count) {
        return;
    }

    DAGNode node = g_dag[g_level_index + gID];

    if (g_level > 0) {
        // update child pointers
        updateChildPointers(node);
    }

    // store index of node before sorting
    g_index[g_level_index + gID] = g_level_index + gID;

    g_dag[g_level_index + gID] = node;
}

