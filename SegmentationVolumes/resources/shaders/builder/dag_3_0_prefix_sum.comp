#version 460
#extension GL_GOOGLE_include_directive: enable
#extension GL_KHR_shader_subgroup_basic: enable
#extension GL_KHR_shader_subgroup_arithmetic: enable

#define SUBGROUP_SIZE 32// 32 NVIDIA; 64 AMD

layout (local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;

layout (push_constant, std430) uniform PushConstants {
    uint g_num_elements;
};

layout (std430, set = 0, binding = 0) buffer elements {
    uint g_elements[];
};

layout (std430, set = 0, binding = 1) buffer offsets {
    uint g_offsets[];
};

shared uint[gl_WorkGroupSize.x] s_subgroupPrefixSum;
shared uint[gl_WorkGroupSize.x / SUBGROUP_SIZE] s_subgroupGlobalOffsets;

void main() {
    uint gID = gl_GlobalInvocationID.x;
    uint lID = gl_LocalInvocationID.x;
    uint sID = gl_SubgroupID;
    uint wID = gl_WorkGroupID.x;

    if (gID >= g_num_elements) {
        return;
    }

    uint element = g_elements[gID];

    /*
    |===| workgroup border (here workgroup size = 32)
    |=| subgroup border (here subgroup size = 4)
    number of subgroups = local_size_x_id / SUBGROUP_SIZE

    // init
    ... |===| 1 | 0 | 0 | 1 |=| 1 | 0 | 1 | 0 |=| 0 | 0 | 1 | 0 |=| 0 | 1 | 0 | 0 |===| ...
    // subgroup prefix sum
    ... |===| 1 | 1 | 1 | 2 |=| 1 | 1 | 2 | 2 |=| 0 | 0 | 1 | 1 |=| 0 | 1 | 1 | 1 |===| ...
    // subgroup global offsets
    ... |===|       0       |=|       2       |=|       4       |=|       5       |===| ...
    // workgroup prefix sum
    ... |===| 1 | 1 | 1 | 2 |=| 3 | 3 | 4 | 4 |=| 4 | 4 | 5 | 5 |=| 5 | 6 | 6 | 6 |===| ...
    */

    // subgroup prefix sum
    uint subgroupPrefixSum = subgroupInclusiveAdd(element);
    s_subgroupPrefixSum[lID] = subgroupPrefixSum;

    // sync
    barrier();

    // subgroup global offsets
    if (lID == 0) {
        uint subgroupGlobalOffset = 0;
        s_subgroupGlobalOffsets[0] = subgroupGlobalOffset;

        for (uint i = 1; i < gl_WorkGroupSize.x / SUBGROUP_SIZE; i++) { // TODO: can be replaced with a prefix sum as well
            uint subgroupLocalOffset = s_subgroupPrefixSum[i * SUBGROUP_SIZE - 1];
            subgroupGlobalOffset += subgroupLocalOffset;
            s_subgroupGlobalOffsets[i] = subgroupGlobalOffset;
        }
    }

    // sync
    barrier();

    // workgroup prefix sum
    uint workgroupPrefixSum = s_subgroupGlobalOffsets[sID] + s_subgroupPrefixSum[lID];
    g_elements[gID] = workgroupPrefixSum;

    // sync
    barrier();

    // store offset
    if (lID == 0) {
        uint index = min(gID + gl_WorkGroupSize.x - 1, g_num_elements - 1);
        g_offsets[wID] = g_elements[index];
    }
}

